from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
from selenium.webdriver.common.action_chains import ActionChains
import pyautogui
import random
import requests
import datetime
import json


chromedriver = False
if chromedriver:
    path_driver = "chromedriver.exe"
else:
    path_driver = "operadriver.exe"


def get_browser(url):
    options = webdriver.ChromeOptions()

    #options.add_argument("--start-maximized")
    #options.add_argument("--window-position=0,0 --window-size=1,1")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    #options.add_argument('--headless')
    options.add_argument("--disable-extensions")
    #options.add_argument('--proxy-server=130.193.38.24:3128')

    browser = webdriver.Chrome(path_driver, chrome_options=options)


    browser.delete_all_cookies()
    browser.get(url)

    #https://agrad:J68YHA3iYnr8MbnLi69uQR@46.101.124.224:3128

    time.sleep(1)

    #pyautogui.typewrite('agrad')
    #pyautogui.press('tab')
    #pyautogui.typewrite('J68YHA3iYnr8MbnLi69uQR')
    #pyautogui.press('enter')

    browser.minimize_window()

    return browser

def get_data(args):
    vin = args['vin']

    url = f'https://xn--90adear.xn--p1ai/check/auto/#{vin}'

    browser = get_browser(url)

    time.sleep(1)

    shell_1 = """(function () {
    var jqxhr, postData;
    window.var = '';
    grecaptcha.execute(reCaptchaSiteKey, {action: 'check_auto_history'})
        .then(function(token) {
            appVehicleCheck.reCaptchaToken = token;
               postData = {
                    vin: '"""+vin+"""',
                    captchaWord: '',
                    checkType: 'history',
                    reCaptchaToken: appVehicleCheck.reCaptchaToken
                };
                jqxhr = $.post('https://xn--b1afk4ade.xn--90adear.xn--p1ai/proxy/check/auto/history', postData, function (resp) {
                }, 'json')
                jqxhr.done(function (resp) {
                    window.var = resp;
                    console.log(resp);
                });
            });
    })()"""

    shell_2 = """return (function () {return window.var}) ()"""

    shell_3 = """(function () {
    var jqxhr, postData;
    grecaptcha.execute(reCaptchaSiteKey, {action: 'check_auto_history'})
        .then(function(token) {
            appVehicleCheck.reCaptchaToken = token;
            });
    })()"""

    shell_4 = """return (function () {return appVehicleCheck.reCaptchaToken}) ()"""

    captchaWord = ''
    checkType = 'history'

    headers = {'Accept': 'application/json, text/javascript, */*; q=0.01',
'Accept-Encoding': 'gzip, deflate, br',
'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
'Connection': 'keep-alive',
'Content-Length': '488',
'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
'DNT': '1',
'Host': 'xn--b1afk4ade.xn--90adear.xn--p1ai',
'Origin': 'https://xn--90adear.xn--p1ai',
'Referer': 'https://xn--90adear.xn--p1ai/check/auto',
'Sec-Fetch-Dest': 'empty',
'Sec-Fetch-Mode': 'cors',
'Sec-Fetch-Site': 'same-site',
'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 OPR/68.0.3618.173'}

    cookies = {} #{'session': '6928d7159a13f44d60e42f5a2b10eb10', 'regionCode': '72', '_ga':'GA1.2.154235625.1594621385'}

    result = {}

    for x in range(0, 2):
        print('=> '+str(x))

        time.sleep(3)

        try:
            browser.execute_script(shell_3)
        except:
            pass

        time.sleep(2)

        reCaptchaToken = ''
        try:
            reCaptchaToken = browser.execute_script(shell_4)
        except:
            pass
    
        payload = f'vin={vin}&captchaWord={captchaWord}&checkType={checkType}&reCaptchaToken={reCaptchaToken}'

        try:
            r = requests.post("https://xn--b1afk4ade.xn--90adear.xn--p1ai/proxy/check/auto/history", data=payload, headers=headers, cookies=cookies)
        except:
            continue

        if len(r.text)>0:
            try:
                result = json.loads(r.text)
            except:
                continue

            if result['status'] == 200:
                break
            elif result['status'] == 404:
                break

    browser.quit()

    print(result)

    return result

